{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport AppLayout from '@/components/layout/AppLayout.vue';\nimport axios from 'axios';\nexport default {\n  components: {\n    AppLayout\n  },\n  data() {\n    return {\n      tableData: [],\n      userChores: {},\n      loadingUsers: false\n    };\n  },\n  methods: {\n    async fetchUsers() {\n      this.loadingUsers = true;\n      const spaceId = localStorage.getItem('spaceId');\n      if (!spaceId) {\n        this.loadingUsers = false;\n        return;\n      }\n      try {\n        const response = await axios.get(`http://localhost:8080/space/${spaceId}`);\n        if (response.data && response.data.users) {\n          this.tableData = response.data.users;\n          // Fetch chores for each user\n          this.tableData.forEach(user => {\n            this.fetchUserChores(user.id);\n          });\n        }\n      } catch (error) {\n        console.error('Error fetching space users:', error);\n        this.$message.error('Failed to fetch users');\n      } finally {\n        this.loadingUsers = false;\n      }\n    },\n    fetchUserChores(userId) {\n      axios.get(`http://localhost:8080/chores/user/${userId}`).then(response => {\n        if (response.data.status === 'success') {\n          this.$set(this.userChores, userId, response.data.data);\n        }\n      }).catch(error => {\n        console.error('Error fetching user chores:', error);\n      });\n    }\n  },\n  mounted() {\n    this.fetchUsers();\n  }\n};","map":{"version":3,"names":["AppLayout","axios","components","data","tableData","userChores","loadingUsers","methods","fetchUsers","spaceId","localStorage","getItem","response","get","users","forEach","user","fetchUserChores","id","error","console","$message","userId","then","status","$set","catch","mounted"],"sources":["src/views/homeharmony/UserView.vue"],"sourcesContent":["<template>\r\n    <div class=\"user-container\">\r\n        <el-row :gutter=\"20\">\r\n            <el-col :span=\"8\" v-for=\"user in tableData\" :key=\"user.id\">\r\n                <el-card class=\"user-card\">\r\n                    <div slot=\"header\" class=\"card-header\">\r\n                        <span>{{ user.username }}</span>\r\n                        <span>Points: {{ user.points }}</span>\r\n                    </div>\r\n                    <div class=\"chores-list\">\r\n                        <h4>Assigned Chores:</h4>\r\n                        <el-table\r\n                            v-if=\"userChores[user.id] && userChores[user.id].length\"\r\n                            :data=\"userChores[user.id]\"\r\n                            style=\"width: 100%\">\r\n                            <el-table-column\r\n                                prop=\"choreName\"\r\n                                label=\"Chore Name\">\r\n                            </el-table-column>\r\n                            <el-table-column\r\n                                prop=\"functionalSpaceType\"\r\n                                label=\"Space Type\">\r\n                            </el-table-column>\r\n                        </el-table>\r\n                        <div v-else class=\"no-chores\">\r\n                            No chores assigned\r\n                        </div>\r\n                    </div>\r\n                </el-card>\r\n            </el-col>\r\n        </el-row>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport AppLayout from '@/components/layout/AppLayout.vue';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    components: {\r\n        AppLayout\r\n    },\r\n    data() {\r\n        return {\r\n            tableData: [],\r\n            userChores: {},\r\n            loadingUsers: false\r\n        }\r\n    },\r\n    methods: {\r\n        async fetchUsers() {\r\n            this.loadingUsers = true;\r\n            const spaceId = localStorage.getItem('spaceId');\r\n            if (!spaceId) {\r\n                this.loadingUsers = false;\r\n                return;\r\n            }\r\n            \r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/space/${spaceId}`);\r\n                if (response.data && response.data.users) {\r\n                    this.tableData = response.data.users;\r\n                    // Fetch chores for each user\r\n                    this.tableData.forEach(user => {\r\n                        this.fetchUserChores(user.id);\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching space users:', error);\r\n                this.$message.error('Failed to fetch users');\r\n            } finally {\r\n                this.loadingUsers = false;\r\n            }\r\n        },\r\n        fetchUserChores(userId) {\r\n            axios.get(`http://localhost:8080/chores/user/${userId}`)\r\n                .then((response) => {\r\n                    if (response.data.status === 'success') {\r\n                        this.$set(this.userChores, userId, response.data.data);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error fetching user chores:', error);\r\n                });\r\n        }\r\n    },\r\n    mounted() {\r\n        this.fetchUsers();\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.user-container {\r\n    padding: 20px;\r\n}\r\n.user-card {\r\n    margin-bottom: 20px;\r\n}\r\n.card-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n}\r\n.chores-list {\r\n    margin-top: 10px;\r\n}\r\n.no-chores {\r\n    color: #999;\r\n    text-align: center;\r\n    padding: 20px;\r\n}\r\n</style>"],"mappings":";;AAmCA,OAAAA,SAAA;AACA,OAAAC,KAAA;AAEA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,SAAA;MACAC,UAAA;MACAC,YAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,WAAA;MACA,KAAAF,YAAA;MACA,MAAAG,OAAA,GAAAC,YAAA,CAAAC,OAAA;MACA,KAAAF,OAAA;QACA,KAAAH,YAAA;QACA;MACA;MAEA;QACA,MAAAM,QAAA,SAAAX,KAAA,CAAAY,GAAA,gCAAAJ,OAAA;QACA,IAAAG,QAAA,CAAAT,IAAA,IAAAS,QAAA,CAAAT,IAAA,CAAAW,KAAA;UACA,KAAAV,SAAA,GAAAQ,QAAA,CAAAT,IAAA,CAAAW,KAAA;UACA;UACA,KAAAV,SAAA,CAAAW,OAAA,CAAAC,IAAA;YACA,KAAAC,eAAA,CAAAD,IAAA,CAAAE,EAAA;UACA;QACA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,gCAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;QACA,KAAAb,YAAA;MACA;IACA;IACAW,gBAAAK,MAAA;MACArB,KAAA,CAAAY,GAAA,sCAAAS,MAAA,IACAC,IAAA,CAAAX,QAAA;QACA,IAAAA,QAAA,CAAAT,IAAA,CAAAqB,MAAA;UACA,KAAAC,IAAA,MAAApB,UAAA,EAAAiB,MAAA,EAAAV,QAAA,CAAAT,IAAA,CAAAA,IAAA;QACA;MACA,GACAuB,KAAA,CAAAP,KAAA;QACAC,OAAA,CAAAD,KAAA,gCAAAA,KAAA;MACA;IACA;EACA;EACAQ,QAAA;IACA,KAAAnB,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}